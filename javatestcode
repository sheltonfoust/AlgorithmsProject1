import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

class Main {
public static int getNumOfInversions(List<Integer> A)
{
	int N = A.size();
	if (N <= 1) {
	return 0;
	}

	PriorityQueue<int[]> sortList
	= new PriorityQueue<>((a, b) -> a[0] - b[0]);
	int result = 0;

	// Heapsort, O(N*log(N))
	for (int i = 0; i < N; i++) {
	sortList.add(new int[] { A.get(i), i });//sort by value, keep track of starting index
	}
	
	
	//sorting is finished, the rest is for inversion counting
	
	
	// Create a sorted list of the original indexes
	List<Integer> x = new ArrayList<>();
	while (!sortList.isEmpty()) {   
	int[] v = sortList.poll();//retrieves and removes the head of the list
    //V is an array which contains an ordered pair with v[0] holding the value and v[1] holding the initial index
    

	System.out.println("new loop");
	int z = 0;
	if (!x.isEmpty()) {
	    System.out.println("v[1] " + v[1]);
	    System.out.println(x);
	    //z is the number of elements before the current element in the original array that are smaller than the current element
	    // the orignal index of the current element - z is the number of inverisons it had
		z = binarySearch(x, 0, x.size() - 1, v[1]);//find v[1] in x and return the location
		System.out.println("z: " + z);

	}
	result += v[1] - z;

	x.add(v[1]);
	x.sort(null);
	int temp = v[1]-z;
	System.out.println(v[0] + " has " + temp + " inversions ");
	}
    System.out.println(x);
	return result;
}

// Implementing binary search
private static int binarySearch(List<Integer> list,
								int start, int end,
								int key)
{

	// iterating while the values of start and end are
	// valid
	while (start <= end) {

	// Finding the midpoint
	int mid = start + (end - start) / 2;
	if (list.get(mid) == key) {
		System.out.println("got to mid");
		return mid;
	}
	else if (list.get(mid) > key) {
		end = mid - 1;
	}
	else {
		start = mid + 1;
	}
	}
	return start;
}

// Driver code
public static void main(String[] args)
{
	List<Integer> A = List.of(1, 20, 6, 4, 5);
	//List<Integer> A = List.of(5, 9, 1, 8, 6, 2, 7, 3, 0, 4); - this code works with my test array
	int result = getNumOfInversions(A);
	System.out.println("Number of inversions are "
					+ result);
}
}

